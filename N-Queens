def is_safe(board, row, col, n):
    for i in range(row):
        if board[i][col] == 'Q':
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 'Q':
            return False
    return True
def solve_n_queens(board, row, n, solutions):
    if row == n:
        solutions.append(["".join(row) for row in board])
        return
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 'Q'
            solve_n_queens(board, row + 1, n, solutions)
            board[row][col] = '.'
def n_queens(n):
    board = [['.' for _ in range(n)] for _ in range(n)]
    solutions = []
    solve_n_queens(board, 0, n, solutions)
    return solutions
def print_solutions(solutions, n):
    print(f"\nSolutions for N = {n}:")
    for idx, solution in enumerate(solutions, start=1):
        print(f"Solution {idx}:")
        for row in solution:
            print(row)
        print()
N = 4
solutions = n_queens(N)
print_solutions(solutions, N)
