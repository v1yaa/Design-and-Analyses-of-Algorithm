INF = float('inf')
def floyd_warshall(n, edges):
    dist = [[INF] * n for _ in range(n)]
    for i in range(n):
        dist[i][i] = 0
    for u, v, w in edges:
        dist[u][v] = dist[v][u] = w

    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    return dist
n = 6
edges = [[0, 1, 1], [0, 2, 5], [1, 2, 2], [1, 3, 1], [2, 4, 3], [3, 4, 1], [3, 5, 6], [4, 5, 2]]
dist = floyd_warshall(n, edges)
print(f"Router A to Router F = {dist[0][5]}")
dist[1][3] = dist[3][1] = INF
dist = floyd_warshall(n, edges)
print(f"Router A to Router F = {dist[0][5]}")
