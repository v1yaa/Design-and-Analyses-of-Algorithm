INF = float('inf')
def floyd_warshall(n, edges):
    dist = [[INF] * n for _ in range(n)]
    for i in range(n):
        dist[i][i] = 0
    for u, v, w in edges:
        dist[u][v] = w
    print("Distance Matrix before applying Floyd's Algorithm:")
    for row in dist:
        print(row)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] != INF and dist[k][j] != INF:
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    print("\nDistance Matrix after applying Floyd's Algorithm:")
    for row in dist:
        print(row)
    return dist
def shortest_path(dist, start, end):
    return dist[start][end] if dist[start][end] != INF else "No path"
n = 4
edges_b = [
    [0, 1, 3], 
    [0, 2, 8], 
    [0, 3, -4],
    [1, 3, 1],  
    [1, 2, 4], 
    [2, 0, 2], 
    [3, 2, -5], 
    [3, 1, 6]  
]
dist_matrix_b = floyd_warshall(n, edges_b)
shortest_dist = shortest_path(dist_matrix_b, 1, 3)
print(f"\nShortest path from City 1 to City 3: {shortest_dist}")
