import heapq
from collections import defaultdict
def maxProbability(n, edges, succProb, start, end):
    graph = defaultdict(list)
    for (a, b), prob in zip(edges, succProb):
        graph[a].append((b, prob))
        graph[b].append((a, prob))
    max_heap = [(-1.0, start)]
    probabilities = [0.0] * n
    probabilities[start] = 1.0
    while max_heap:
        current_prob, node = heapq.heappop(max_heap)
        current_prob = -current_prob
        if node == end:
            return current_prob
        for neighbor, edge_prob in graph[node]:
            new_prob = current_prob * edge_prob
            if new_prob > probabilities[neighbor]:
                probabilities[neighbor] = new_prob
                heapq.heappush(max_heap, (-new_prob, neighbor))
    return 0.0
n = 3
edges = [[0, 1], [1, 2], [0, 2]]
succProb = [0.5, 0.5, 0.2]
start = 0
end = 2
print(f"{maxProbability(n, edges, succProb, start, end):.5f}")
