def is_safe(board, row, col, m, n):
    for i in range(row):
        if board[i][col] == 'Q':
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if i < m and j < n and board[i][j] == 'Q':
            return False
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if i < m and j < n and board[i][j] == 'Q':
            return False
    return True
def solve_generalized_n_queens(board, row, m, n, queens, solutions):
    if queens == 0:
        solutions.append(["".join(row) for row in board])
        return
    for col in range(n):
        if is_safe(board, row, col, m, n):
            board[row][col] = 'Q'
            solve_generalized_n_queens(board, row + 1, m, n, queens - 1, solutions)
            board[row][col] = '.'
def generalized_n_queens(m, n):
    queens = min(m, n)
    board = [['.' for _ in range(n)] for _ in range(m)]
    solutions = []
    solve_generalized_n_queens(board, 0, m, n, queens, solutions)
    return solutions
def print_solutions(solutions, m, n):
    print(f"\nSolutions for {m}x{n} board:")
    for idx, solution in enumerate(solutions, start=1):
        print(f"Solution {idx}:")
        for row in solution:
            print(row)
        print()
solutions = generalized_n_queens(8, 10)
print_solutions(solutions, 8, 10)
