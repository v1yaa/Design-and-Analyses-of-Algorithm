import heapq
from collections import defaultdict
def findTheCity(n, edges, distanceThreshold):
    graph = defaultdict(list)
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))
    def dijkstra(start):
        dist = [float('inf')] * n
        dist[start] = 0
        heap = [(0, start)]
        while heap:
            d, node = heapq.heappop(heap)
            if d > dist[node]: continue
            for neighbor, weight in graph[node]:
                if d + weight < dist[neighbor]:
                    dist[neighbor] = d + weight
                    heapq.heappush(heap, (dist[neighbor], neighbor))
        return sum(d <= distanceThreshold for d in dist)
    best_city, min_reachable = -1, float('inf')
    for city in range(n):
        reachable = dijkstra(city)
        if (reachable < min_reachable) or (reachable == min_reachable and city > best_city):
            min_reachable, best_city = reachable, city
    return best_city
n = 4
edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]
distanceThreshold = 4
print(findTheCity(n, edges, distanceThreshold)) 
