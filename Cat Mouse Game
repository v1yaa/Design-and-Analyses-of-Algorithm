from collections import deque
def catMouseGame(graph):
    n = len(graph)
    DRAW, MOUSE_WIN, CAT_WIN = 0, 1, 2
    dp = [[[-1] * (2 * n) for _ in range(n)] for _ in range(n)]
    def search(mouse, cat, turns):
        if turns == 2 * n: return DRAW
        if dp[mouse][cat][turns] != -1: return dp[mouse][cat][turns]
        if mouse == 0: return MOUSE_WIN
        if mouse == cat: return CAT_WIN
        is_mouse_turn = turns % 2 == 0
        result = CAT_WIN if is_mouse_turn else MOUSE_WIN
        for move in (graph[mouse] if is_mouse_turn else (move for move in graph[cat] if move != 0)):
            res = search(move if is_mouse_turn else mouse, move if not is_mouse_turn else cat, turns + 1)
            if (is_mouse_turn and res == MOUSE_WIN) or (not is_mouse_turn and res == CAT_WIN):
                result = (MOUSE_WIN if is_mouse_turn else CAT_WIN)
                break
            if res == DRAW:
                result = DRAW
        dp[mouse][cat][turns] = result
        return result
    return search(1, 2, 0)
graph = [[2, 5], [3], [0, 4, 5], [1, 4, 5], [2, 3], [0, 2, 3]]
print(catMouseGame(graph)) 
